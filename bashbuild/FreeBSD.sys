[[ -z "$CXX"    ]] && export CXX="c++"
[[ -z "$CC"     ]] && export CC="cc" 
[[ -z "$AR"     ]] && export AR="ar"
[[ -z "$LD"     ]] && export LD="ld"
[[ -z "$AROPTS" ]] && export AROPTS="cru"

export  GCCVER="$($CC --version 2>/dev/null | grep gcc   | head -1 | sed 's/^.* //g' 2>/dev/null)"
export CLANGVER="$($CC --version 2>/dev/null | grep clang | head -1 | sed 's/^.* //g' 2>/dev/null)"

export GCCCOLORIZED=""
[[ -n "${CLANGVER}"     ]]  && GCCCOLORIZED="-Xclang -fcolor-diagnostics"
[[ "${GCCVER}" > "4.8"  ]]  && GCCCOLORIZED="-fdiagnostics-color=always"

export FREEBSD="FreeBSD"

export HASHOPTS="-b --tag"
export PREFIX="/usr/local/bin"
export PREFIXLIB="/usr/local/share/"

export CFLAGS="$CFLAGS -fno-common -fPIC -fwrapv -fno-strict-aliasing -Wno-write-strings -O2 -ffast-math -fomit-frame-pointer"
export CXXFLAGS="$CXXFLAGS -fno-common -fPIC -fwrapv -fno-strict-aliasing -Wno-write-strings -O2 -ffast-math -fomit-frame-pointer"
export SYSLIBS=""
export GCCSTATIC=""

export NOWARNFORMATTRUNC=""
# is this needed for FreeBSD?
# fix to alow modern XCode/stdc++ clang compilation, see: https://stackoverflow.com/questions/12920891/std-linker-error-with-apple-llvm-4-1
# and https://apple.stackexchange.com/questions/350627/how-can-i-specify-the-c-version-to-use-with-xcode
# wxWidgets may also need patching, see: https://stackoverflow.com/a/37632111

if  [[ "$CLANGVER" ]]; then
    export SYSLIBS="-lstdc++"
   #export SYSLIBS="-lc++"
fi

export AROPTS="cru"

export CLICMD=""
export GUIAPP=""

if [[ -f /etc/os-release ]]; then
   eval $(sed -e 's/^/export OSREL_/g' /etc/os-release  )
fi


export USEOPENAL=""
# Do we have OpenAL installed? Only -l's are needed -L and -I for these paths are default
if [[ -f /usr/local/lib/libalure.so\.*\.*\.* ]]; then
   [[ -d /usr/local/include/AL ]] &&  [[ -f "$(ls -1 /usr/local/lib/libopenal.so.*\.*\.\* )" ]] && export USEOPENAL="-lopenal -lalure "
   [[ -d /usr/local/include/AL ]] &&  [[ -f "$(ls -1 /usr/local/lib/libopenal.*\.*.a)"       ]] && export USEOPENAL="-lopenal -lalure "
fi


# Only used on Windows
function windres() {
true 
}

function FreeBSDPackage() {

  pushd . >/dev/null 2>/dev/null

  SUFFIX=""
  [[ "${STABILITY}" != "RELEASE" ]] && [[ "${STABILITY}" != "PRODUCTION" ]] && export SUFFIX="-${STABILITY}-${RELEASEDATE}"

  export STAGEDIR="${XTLD}/pkg/build/tmp/freebsd/"
  export MANIFEST="${XTLD}/pkg/build/tmp/freebsd/+MANIFEST"

  rm -rf "${STAGEDIR}"
  mkdir -pm755 "${STAGEDIR}"

cat >"${MANIFEST}" <<ENDFBSDMANIFESTEND
name: ${LCNAME}
version: "${VER}${SUFFIX}"
origin: ${FREEBSDORIGIN}
comment: "${DESCRIPTION}"
desc: "${DESCRIPTION}"
maintainer: "${AUTHEMAIL}"
www: ${URL}
prefix: /
ENDFBSDMANIFESTEND

  # copy/override any other manifests
  cp "${XTLD}/pkg/templates/freebsd-package/"+* "${STAGEDIR}/" 2>/dev/null

  # copy our artifacts to the staging area

  if [[ ! -d "${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/" ]]; then
     echo "PREFIX ${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/ is missing, did build/install fail?" 1>&2
     exit 1
  fi

  # copy from install dir
  (cd "${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/" && tar cpf - .) | (cd "${STAGEDIR}" && tar xpf -)

  # create plist
  (cd "${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/" && find . -type f -print | cut -c2- > "${STAGEDIR}/plist" )

  cd "${STAGEDIR}"

  # add dependencies to the manifest
  ( echo 'deps: {'
     for pkg in $( echo "${FREEBSDDEPENDS}" | sed -e 's/,//g' ); do
         pkg query "  %n: { version: \"%v\", origin: %o }" ${pkg}
     done
     echo '}'
  ) 2>/dev/null >>"${MANIFEST}"

  cd "${XTLD}/pkg"
  pkg create -m "${STAGEDIR}/" -r "${STAGEDIR}/" -p "${STAGEDIR}/plist" -o .
   
  popd . >/dev/null 2>/dev/null
}

##############################################################################
# getcpus
#
# Gets the number of CPUs available on the machine so we can issue multiple
# compiles simultaneously
#
##############################################################################

function getcpus()
{
  if [[ -z "$NUMCPUS" ]]; then
     export NUMCPUS="$(  sysctl hw.model hw.machine hw.ncpu | grep hw.ncpu: | cut -d: -f2 | sed -e's/ //g' )"
  fi
}


##############################################################################
# makelibs
#
# Creates both static and shared libraries.
#
# Parameters $1 target directory
#	     $2 library name
#            $3 version tripplet.  i.e. 0.3.6
#            $4 mode "static", "shared", or "both"
#            $5 is a single string containing objects to merge.
#               i.e. "a.o b.o c.o ..."
#
# i.e.
#            makelibs  . libGenerator 0.3.6 both "lib68k.o cpu68k-?.o"
#
##############################################################################
function makelibs() {

dir="$1"
libname="$2"
ver="$3"
mode="$4"
objs="$5"

aname="${libname}.${ver}.a"
laname="${libname}.a"
daname="${dir}/${aname}"
ldaname="${dir}/${laname}"

soname="${dir}/${libname}.${ver}.so"
lsoname="${dir}/${libname}.so"
ldsoname="${dir}/${libname}.so"
dsoname="${soname}"

[[ "$4" == "both" ]] && mode="static"


if [[ "$mode" == "static" ]]
then
     echo "  Creating  $libname.a" 1>&2
     $AR "$AROPTS" "${daname}" ${objs} || exit 1
     ranlib ${daname}         || exit 1
     /bin/rm -f       ${ldaname}
     ln -sf ${daname} ${ldaname}
fi


[[ "$4" == "both" ]] && mode="shared"

if [[ "$mode" == "shared" ]]
then
             # :TODO: test this
             echo "  Creating  $libname.so" 1>&2
             $CC $ARCH -shared- -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup  \
                 -install_name /usr/local/lib/${libname}.so                                 \
                 -compatibility_version ${ver} -current_version ${ver}                      \
                 -o ${libname}.so ${objs}                                      || exit 1

             /bin/rm -f          ${soname}
             ln -sf ${lsoname}   ${soname}                                 

fi

echo -n "" >/dev/null
}
