###############################################################################
# Unified Build Script lib Windows Specific Settings  -  A Part of LisaEm
#                    http://lisaem.sunder.net
#                   The Lisa Emulator Project
#   Copyright (C) 2022 Ray A. Arachelian, All Rights Reserved
# Released under the terms of the GNU General Public License 2.0
#-------------------------------------------------------------------------------
#
#  Cygwin related options
#
###############################################################################

export CYGWIN="$(uname -s)"
export WINDOWS="$(uname -s)"

[[ -z "$AR"      ]] && export AR=/bin/x86_64-w64-mingw32-ar.exe
[[ -z "$AS"      ]] && export AS=/bin/x86_64-w64-mingw32-as.exe
[[ -z "$CPP"     ]] && export CPP=/bin/x86_64-w64-mingw32-cpp.exe
[[ -z "$DLLTOOL" ]] && export DLLTOOL=/bin/x86_64-w64-mingw32-dlltool.exe
[[ -z "$DLLWRAP" ]] && export DLLWRAP=/bin/x86_64-w64-mingw32-dllwrap.exe
[[ -z "$CXX"     ]] && export CXX=/bin/x86_64-w64-mingw32-g++.exe
[[ -z "$CC"      ]] && export CC=/bin/x86_64-w64-mingw32-gcc.exe
[[ -z "$RANLIB"  ]] && export RANLIB=/bin/x86_64-w64-mingw32-ranlib.exe
[[ -z "$GCOV"    ]] && export GCOV=/bin/x86_64-w64-mingw32-gcov.exe
[[ -z "$GPROF"   ]] && export GPROF=/bin/x86_64-w64-mingw32-gprof.exe
[[ -z "$LD"      ]] && export LD=/bin/x86_64-w64-mingw32-ld.exe
[[ -z "$NM"      ]] && export NM=/bin/x86_64-w64-mingw32-nm.exe
[[ -z "$OBJCOPY" ]] && export OBJCOPY=/bin/x86_64-w64-mingw32-objcopy.exe
[[ -z "$OBJDUMP" ]] && export OBJDUMP=/bin/x86_64-w64-mingw32-objdump.exe
[[ -z "$STRIP"   ]] && export STRIP=/bin/x86_64-w64-mingw32-strip.exe
[[ -z "$WINDMC"  ]] && export WINDMC=/bin/x86_64-w64-mingw32-windmc.exe
[[ -z "$WINDRES" ]] && export WINDRES=/bin/x86_64-w64-mingw32-windres.exe

export AROPTS="crD"
export HASHOPTS="-b --tag"

function set_pkg_prefix() {
  if [[ "$WITHPGK" ]]; then
     export PREFIX="${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}"         # /cygdrive/c/Program Files/${COMPANY}/${SOFTWARE}"
     export PREFIXLIB="${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/lib"
  fi
}

##############################################################################
# getcpus
#
# Gets the number of CPUs available on the machine so we can issue multiple
# compiles simultaneously
#
##############################################################################

function getcpus()
{
     export NUMCPUS="$( nproc )"
     [[ "$NUMCPUS" -lt 2 ]] && export NUMCPUS=2
}


##############################################################################
# makelibs
#
# Creates both static and shared libraries.
#
# Parameters $1 target directory
#	     $2 library name
#            $3 version tripplet.  i.e. 0.3.6
#            $4 mode "static", "shared", or "both"
#            $5 is a single string containing objects to merge.
#               i.e. "a.o b.o c.o ..."
#
# i.e.
#            makelibs  . libGenerator 0.3.6 both "lib68k.o cpu68k-?.o"
#
##############################################################################
function makelibs() {

dir="$1"
libname="$2"
ver="$3"
mode="$4"
objs="$5"

aname="${libname}.${ver}.a"
laname="${libname}.a"
daname="${dir}/${aname}"
ldaname="${dir}/${laname}"

soname="${dir}/${libname}.${ver}.so"
lsoname="${dir}/${libname}.so"
ldsoname="${dir}/${libname}.so"
dsoname="${soname}"
dylibname="${dir}/${libname}.${ver}.dylib"
ldylibname="${dir}/${libname}.dylib"
dllname="${dir}/${libname}.${ver}.dll"
ldllname="${dir}/${libname}.dll"

[[ "$4" == "both" ]] && mode="static"


if [[ "$mode" == "static" ]]; then
     echo "  Creating  $libname.a" 1>&2
     $AR "$AROPTS" "${daname}" ${objs} || exit 1
     $RANLIB ${daname}         || exit 1
     /bin/rm -f       ${ldaname}
     ln -sf ${daname} ${ldaname}
fi


[[ "$4" == "both" ]] && mode="shared"

if [[ "$mode" == "shared" ]]; then
     echo "  Creating  $libname.dll" 1>&2
     $CC -shared -o      ${dllname} ${objs}                  || exit 1
     /bin/rm -f          ${ldllname}
     ln -sf ${dllname}   ${ldllname}
     #see: http://www.cygwin.com/cygwin-ug-net/dll.html
fi
}



# Create a windows resource from a template.
function windres() {

if [[ -n "$CYGWIN" ]]; then
    export MINVER="`echo $VERSION| cut -f1 -d'-' | sed 's/\./,/g'`,0"
    cat >${XTLD}/resources/windres_private.rc <<END
#include <windows.h> // include for version info constants

A ICON MOVEABLE PURE LOADONCALL DISCARDABLE "lisaem.ico"

//
// SUPPORT FOR WINDOWS XP THEMES:
// THIS WILL MAKE THE PROGRAM USE THE COMMON CONTROLS
// LIBRARY VERSION 6.0 (IF IT IS AVAILABLE)
//
1 24 "lisaem.exe.Manifest"

1 VERSIONINFO
FILEVERSION ${MINVER}
PRODUCTVERSION ${MINVER}
FILETYPE VFT_APP
{
  BLOCK "StringFileInfo"
         {
                 BLOCK "040904E4"
                 {
                         VALUE "CompanyName", "${COMPANY}"
                         VALUE "FileVersion", "${VERSION}"
                         VALUE "FileDescription", "${DESCRIPTION}"
                         VALUE "InternalName", "${URL}"
                         VALUE "LegalCopyright", "${COPYRIGHTLINE}"
                         VALUE "LegalTrademarks", ""
                         VALUE "OriginalFilename", "${SOFTWARE}"
                         VALUE "ProductName", "${SOFTWARE}"
                         VALUE "ProductVersion", "${VERSION}"
                 }
         }
  BLOCK "VarFileInfo"
         {
                 VALUE "Translation", 0x0409, 1252
         }
}

${WINDOWS_RES_ICONS}
#include <wx/msw/wx.rc>
END
    qjob "!!  win32 resources $app" $WINDRES --input-format=rc -O coff -I $(wx-config --prefix)/include/* -i ${XTLD}/resources/windres_private.rc -o ${XTLD}/obj/windres_private.res
    export LIST="$LIST ${XTLD}/obj/windres_private.res"
    echo "${XTLD}/obj/windres_private.res"
 fi
}

# Create a zip file package
function WinZIPPackage() {
  PKGNAME="$1"
  PKGPATH="$2"
  if [[ "$( which zip 2>/dev/null)" ]]; then

     zip -r -9 -q "${PKGNAME}" "$PKGPATH"
     echo "Created zip package: ${PKGNAME} from ${PKGPATH}" 1>&2
  else
     echo "zip command not installed, cannot create ZIP package from files in ${PKGPATH}" 1>&2

  fi

  export PREFIX="${TLDR}/pkg/build/tmp/${COMPANY}/${SOFTWARE}"
  export PREFIXLIB="${TLDR}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/lib"
}

function HasNSIS() {
  [[ -f /cygdrive/c/Program\ Files\ \(x86\)/NSIS/Bin/makensis.exe ]] && echo "yes" || echo ""
}


function GenerateNSISScript() {

LICENSEDATA=""
if [[ -f ../../../../../LICENSE.txt ]]; then
   cp      ../../../../../LICENSE.txt .
   LICENSEDATA="  LicenseData LICENSE.txt"
fi

PF64=""
[[ "$( uname -m )" == "x86_64" ]] && PF64="64"

# ├── LICENSE.txt
# ├── resources
# │   ├── lisa2icon.ico
# │   ├── lisaem.ico
# ├── pkg
# │   ├── LisaEm-1.2.7-PRE-RC4-UNSTABLE-2021.09.29-win-x86_64.log
# │   ├── build
# │   │   └── tmp
# │   │       ├── LisaEm
# │   │       │   ├── bin
# │   │       │   │   ├── blu-to-dc42.exe
# CWD: lisaem-1.2.7/pkg/build/tmp/Sunder.net/LisaEm/*

cat >${1} <<ENDNSISEND
; based on: https://nsis.sourceforge.io/Sample_installation_script_for_an_application
; -------------------------------
; Start
  Name "${SOFTWARE}"
  !define MUI_PRODUCT "${SOFTWARE}"
  !define MUI_NAME    "${SOFTWARE}"
  !define MUI_FILE    "${SOFTWARE}.EXE"
  !define MUI_VERSION "${VERSION}"
  !define MUI_BRANDINGTEXT "${SOFTWARE} ${VERSION}"
  CRCCheck On
  !include "\${NSISDIR}\\Contrib\\Modern UI\\System.nsh"
;---------------------------------
;General
  OutFile "..\\..\\${PKGNAME}"
  ;ShowInstDetails "nevershow"
  ;ShowUninstDetails "nevershow"
  SetCompressor "LZMA"

;--------------------------------
;Folder selection page c:\Program Files\Sunder.NET\LisaEm LisaEm dir comes from File /r
  InstallDir "\$PROGRAMFILES${PF64}"
;--------------------------------
;Modern UI Configuration
  !define MUI_WELCOMEPAGE  
  !define MUI_LICENSEPAGE
  !define MUI_DIRECTORYPAGE
  !define MUI_ABORTWARNING
  !define MUI_UNINSTALLER
  !define MUI_UNCONFIRMPAGE
  !define MUI_FINISHPAGE  
;--------------------------------
${LICENSEDATA}
;-------------------------------- 
;Installer Sections     
Section ; "Install" Installation info
 
;Add files
  SetOutPath "\$PROGRAMFILES${PF64}"       ;\\${COMPANY}"
; CWD: lisaem-1.2.7/pkg/build/tmp/Sunder.NET/LisaEm/*
  File /r "${SOFTWARE}"
 
;create desktop shortcut "C:\Program Files\LisaEm.EXE"
  CreateShortCut "\$DESKTOP\\\${MUI_PRODUCT}.lnk" "\$INSTDIR\\${COMPANY}\\${SOFTWARE}\\${SOFTWARE}.EXE" 
 
;create start-menu items
  CreateDirectory "\$SMPROGRAMS\\${COMPANY}\\\${MUI_PRODUCT}"
  CreateShortCut  "\$SMPROGRAMS\\${COMPANY}\\\${MUI_PRODUCT}\\Uninstall.lnk" "\$INSTDIR\\${COMPANY}\\${SOFTWARE}\\Uninstall.exe" "" "\$INSTDIR\\Uninstall.exe" 0
  CreateShortCut  "\$SMPROGRAMS\\${COMPANY}\\\${MUI_PRODUCT}\\\${MUI_PRODUCT}.lnk" "\$INSTDIR\\${COMPANY}\\${SOFTWARE}\\${SOFTWARE}.exe" "" "\$INSTDIR\\${SOFTWARE}\\${SOFTWARE}.exe" 0

;write uninstall information to the registry
  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${MUI_PRODUCT}" "DisplayName" "\${MUI_PRODUCT} (remove only)"
  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${MUI_PRODUCT}" "UninstallString" "\$INSTDIR\\${COMPANY}\\${SOFTWARE}\\Uninstall.exe"
 
  WriteUninstaller "\$INSTDIR\\${COMPANY}\\${SOFTWARE}\\Uninstall.exe"
 
SectionEnd
;--------------------------------    
;Uninstaller Section  
Section "Uninstall"
 
;Delete Files 
  RMDir /r "\$INSTDIR\\*.*"    
 
;Remove the installation directory
  RMDir "\$INSTDIR"
 
;Delete Start Menu Shortcuts
  Delete "\$DESKTOP\\\${MUI_PRODUCT}.lnk"
  Delete "\$SMPROGRAMS\\\${MUI_PRODUCT}\\*.*"
  RmDir  "\$SMPROGRAMS\\\${MUI_PRODUCT}"
 
;Delete Uninstaller And Unistall Registry Entries
  DeleteRegKey HKEY_LOCAL_MACHINE "SOFTWARE\\\${MUI_PRODUCT}"
  DeleteRegKey HKEY_LOCAL_MACHINE "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\${MUI_PRODUCT}"  
 
SectionEnd
;--------------------------------    
;MessageBox Section
 
;Function that calls a messagebox when installation finished correctly
Function .onInstSuccess
  MessageBox MB_OK "You have successfully installed \${MUI_PRODUCT}. Use the desktop or Start Menu icon to start the program."
FunctionEnd
 
Function un.onUninstSuccess
  MessageBox MB_OK "You have successfully uninstalled \${MUI_PRODUCT}."
FunctionEnd
 
;eof
ENDNSISEND
}


function WinNSISPackage() {
  if [[ -n "$( HasNSIS )" ]]; then

     export PREFIX="${TLDR}/pkg/build/tmp/${COMPANY}/${SOFTWARE}"
     export PREFIXLIB="${TLDR}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/lib"

     # since makensis is windows, do not put path inside PKGNAME, instead cd into the staged dir
     # and then output the package through the script to some dirs back up.

     PKGNAME="${SOFTWARE}-${VER}-${STABILITY}-${RELEASEDATE}-win-${MACHINE}.exe"
     NSISSCRIPT="${SOFTWARE}-${VER}-${STABILITY}-${RELEASEDATE}-win-${MACHINE}.nsi"
     NSISOUTPUT="${SOFTWARE}-${VER}-${STABILITY}-${RELEASEDATE}-win-${MACHINE}.log"

     echo "Creating NSIS Windows Package: ${XTLD}/pkg/$PKGNAME" 1>&2
     mkdir -pm755 "${XTLD}/pkg/build/tmp"

     pushd        "${XTLD}/pkg/build/tmp" 2>/dev/null >/dev/null
     GenerateNSISScript "$NSISSCRIPT"
     cd "${COMPANY}/${SOFTWARE}"
     # ├── build   <- package output here.
     # │   ├── tmp <- log + nsi script here
     # │   └── Sunder.NET  
     # │       └── LisaEm <- staged install for package precopied in here, CWD
     # │           ├── bin
     /cygdrive/c/Program\ Files\ \(x86\)/NSIS/Bin/makensis.exe /V4 /O"..\\..\\$NSISOUTPUT" ..\\..\\"$NSISSCRIPT" 

     if [[ -f "${XTLD}/pkg/${PKGNAME}" ]]; then
        echo "Created ${XTLD}/pkg/build/$PKGNAME Log file in ${XTLD}/pkg/build/tmp/$NSISOUTPUT" 1>&2 
     else
        echo "NSIS Pkg failed ${XTLD}/pkg/build/$PKGNAME Log file in ${XTLD}/pkg/build/tmp/$NSISOUTPUT" 1>&2
     fi

     popd >/dev/null 2>/dev/null
  fi
}

function CygwinSudoRebuild() {
  if [[ -z "$(/bin/id | grep Administrator)" ]]; then

     if [[ -z "$YESTOALL" ]]; then
        echo "To install, we need start Cygwin Shell with Administrative capabilities." 1>&2
        echo "Enter yes to start this build script in an Administrative shell or hit ENTER to abort" 1>&2
        [[ -z "$CYGWINYES" ]] && read x
     else
        x="$YESTOALL"
     fi
     if [[ "$x" == "yes" ]]; then
        export file="${TLD}/.env-$$.reload.sh"
        (
          echo '#!/usr/bin/env bash'
          echo "cd \"${XTLD}\""
          echo "export PATH=\"$PATH\""
	  echo "export HASPERMISSION=yes"
          echo "./build.sh $@"
          echo "echo Press ENTER to close Admin shell window"
          echo "read x"
        ) >"$file"
       chmod 755 "$file"
       cygstart -w --action=runas mintty.exe -w max -h -e /usr/bin/bash "$file"
         cat "$file"
       echo "Completed in Admin mintty window" 1>&2
       #rm "$file"
       exit 0
     else
       export INSTALL=""
       echo "Skipping install" 1>&2
     fi
  else
     export HASPERMISSION="yes"
     echo "In Admin mode"
     read x
  fi
}


function set_pkg_prefix() {
  if [[ -n "$WITHPKG" ]]; then
     export PREFIX="${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/"
     export PREFIXLIB="${XTLD}/pkg/build/tmp/${COMPANY}/${SOFTWARE}/"
     ACTION="Packaging"
  fi
}

###############################################################################
###############################################################################
###  Initialize Platform specific variables    ################################
###############################################################################
###############################################################################

export EXT=".exe"
export EXTTYPE="exe"
export STATIC=--static

# We expect the Cygwin provided mingw64 compilers and related, so not going to usethe cygpath command anymore.
# perhaps provide for that in the future, but not now/yet.


export   GCCVER="$($CC --version 2>/dev/null | grep gcc   | head -1 | sed 's/^.* //g')"
export CLANGVER="$($CC --version 2>/dev/null | grep clang | head -1 | sed 's/^.* //g')"

export GCCCOLORIZED=""
[[ -n "${CLANGVER}"     ]]  && GCCCOLORIZED="-Xclang -fcolor-diagnostics"
[[ "${GCCVER}" > "4.8"  ]]  && GCCCOLORIZED="-fdiagnostics-color=always"


CCOPTS="$GCCCOLORIZED -fcommon -fwrapv -fPIC -fno-strict-aliasing -Wno-write-strings -O2 -ffast-math -fomit-frame-pointer \
       -fno-exceptions -fno-pcc-struct-return -malign-double -falign-loops=5 -falign-jumps=5 -falign-functions=5 \
       -fno-pcc-struct-return"

export CDEFS="-D__WXMSW__ -D__GNUWIN32__ -D__WIN95__ -fno-exceptions -fno-pcc-struct-return -fstrict-aliasing $WARNINGS -D__WXMSW__ -D__GNUWIN32__ -D__WIN95__"
export LIBS="-L $WXLIB -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lshlwapi -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lversion -lwsock32 -lwininet"
export LINKOPTS="${STATIC} ${LINKOPTS} ${GCCCOLORIZED} ${LIBS}"

export   CFLAGS="${CFLAGS} ${GCCCOLORIZED} ${CCOPTS}"
export CXXFLAGS="${CXXFLAGS} ${GCCCOLORIZED} ${CCOPTS} -fno-rtti"
# -fno-rtti is a C++ option only ^

export CLICMD="-mconsole"
export GUIAPP="-mwindows"

# installing on Windows goes to C:\Program Files\... rather than packaging which goes under ${XTLD}/pkg/build/tmp/
for i in $@; do
  [[ "$i" == "install" ]] && PRE="/cygdrive/c/"
done
for i in $@; do
  [[ "$i" == "package" ]] && PRE=""
done

if [[ -z "$PREFIX" ]]; then
   export PREFIX="/cygdrive/c/${PRE}Program Files/${COMPANY}/${SOFTWARE}"
   export PREFIXLIB="${PRE}Program Files/${COMPANY}/${SOFTWARE}/lib"
fi
